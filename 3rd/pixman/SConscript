import os

env = DefaultEnvironment().Clone()
LIB_DIR = os.environ['LIB_DIR'];
BIN_DIR = os.environ['BIN_DIR'];

CCFLAGS = os.environ['CCFLAGS'] + ' -DHAVE_CONFIG_H -DPIXMAN_NO_TLS '

CORE_FILES = [
  'pixman/pixman-filter.c',	
  'pixman/pixman-access.c',		
  'pixman/pixman-general.c',		
  'pixman/pixman-radial-gradient.c',
  'pixman/pixman-access-accessors.c',
  'pixman/pixman-glyph.c',
  'pixman/pixman-region16.c',
  'pixman/pixman-gradient-walker.c',
  'pixman/pixman-region32.c',
  'pixman/pixman-image.c',		
  'pixman/pixman-solid-fill.c',
  'pixman/pixman-bits-image.c',		
  'pixman/pixman-implementation.c',		
  'pixman/pixman-combine-float.c',	
  'pixman/pixman-linear-gradient.c',	
  'pixman/pixman-combine32.c',
  'pixman/pixman-matrix.c',
  'pixman/pixman-trap.c',
  'pixman/pixman-conical-gradient.c',
  'pixman/pixman-utils.c',
  'pixman/pixman-edge-accessors.c',
  'pixman/pixman-edge.c',
  'pixman/pixman.c',
  'pixman/pixman-noop.c',
  'pixman/pixman-fast-path.c',
  'pixman/pixman-arm.c',
  'pixman/pixman-mips.c', 
  'pixman/pixman-x86.c', 
  'pixman/pixman-ppc.c'
]	

PPC_FILES=[]

ARM_FILES=['pixman/pixman-arm-neon.c', 
  'pixman/pixman-arm-simd.c', 
  'pixman/pixman-arm-neon-asm-bilinear.S',
  'pixman/pixman-arm-neon-asm.S',
  'pixman/pixman-arm-simd-asm.S',
  'pixman/pixman-arm-simd-asm-scaled.S'
]

MIPS_FILES=['pixman/pixman-mips-dspr2.c', 
'pixman/pixman-mips-dspr2-asm.S', 
'pixman/pixman-mips-memcpy-asm.S'
]

X86_FILES=['pixman/pixman-sse2.c', 
  'pixman/pixman-ssse3.c', 
  'pixman/pixman-mmx.c'
]

SOURCES = CORE_FILES + X86_FILES
env.Library(os.path.join(LIB_DIR, 'pixman'), SOURCES, CCFLAGS = CCFLAGS);

